// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider   = "prisma-client-js"
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model File {
    id          Int      @id @default(autoincrement())
    path        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(name: "author", fields: [createdById], references: [id], onDelete: Cascade)
    createdById String
    takenBy     User?    @relation(name: "taker", fields: [takenById], references: [id], onDelete: Cascade)
    takenById   String?
    group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId     Int
    name        String

    @@index([id])
}

model Group {
    id          Int             @id @default(autoincrement())
    name        String
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    createdBy   User            @relation(fields: [createdById], references: [id])
    createdById String
    files       File[]
    users       UsersOnGroups[]

    @@index([id])
}

model UsersOnGroups {
    id      Int    @id @default(autoincrement())
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId Int

    @@index([id])
}

// Necessary for Next auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id         String          @id @default(cuid())
    name       String?
    email      String?         @unique
    password   String
    sessions   Session[]
    files      File[]          @relation("author")
    takenFiles File[]          @relation("taker")
    groups     UsersOnGroups[]
    ownGroups  Group[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
